/* tslint:disable */
/* eslint-disable */
/**
 * Географические объекты
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  MarsStationSerializer,
  MarsStationSerializerDetail,
  PUTMarsStationBYADMINRequest,
} from '../models/index';
import {
    MarsStationSerializerFromJSON,
    MarsStationSerializerToJSON,
    MarsStationSerializerDetailFromJSON,
    MarsStationSerializerDetailToJSON,
    PUTMarsStationBYADMINRequestFromJSON,
    PUTMarsStationBYADMINRequestToJSON,
} from '../models/index';

export interface DELETEMarsStationRequest {
    id: number;
    authorization: string;
}

export interface GETMarsStationRequest {
    id: number;
    authorization: string;
}

export interface GETMarsStationListRequest {
    authorization: string;
    statusMission?: string;
    dateCreate?: string;
    dateClose?: string;
    statusTask?: string;
    dateFormAfter?: string;
    dateFormBefore?: string;
}

export interface PUTMarsStationRequest {
    id: number;
    authorization: string;
    marsStationSerializer?: MarsStationSerializer;
}

export interface PUTMarsStationBYADMINOperationRequest {
    id: number;
    authorization: string;
    pUTMarsStationBYADMINRequest: PUTMarsStationBYADMINRequest;
}

export interface PUTMarsStationBYUSERRequest {
    id: number;
    authorization: string;
}

/**
 * 
 */
export class MarsStationApi extends runtime.BaseAPI {

    /**
     * Удаление марсианской станции
     */
    async dELETEMarsStationRaw(requestParameters: DELETEMarsStationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling dELETEMarsStation.');
        }

        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling dELETEMarsStation.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        const response = await this.request({
            path: `/api/mars_station/{id}/delete/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Удаление марсианской станции
     */
    async dELETEMarsStation(requestParameters: DELETEMarsStationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.dELETEMarsStationRaw(requestParameters, initOverrides);
    }

    /**
     * Получение данных о марсианской станции
     */
    async gETMarsStationRaw(requestParameters: GETMarsStationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<MarsStationSerializerDetail>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling gETMarsStation.');
        }

        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling gETMarsStation.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        const response = await this.request({
            path: `/api/mars_station/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => MarsStationSerializerDetailFromJSON(jsonValue));
    }

    /**
     * Получение данных о марсианской станции
     */
    async gETMarsStation(requestParameters: GETMarsStationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<MarsStationSerializerDetail> {
        const response = await this.gETMarsStationRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Получение списка марсианских станций
     */
    async gETMarsStationListRaw(requestParameters: GETMarsStationListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<MarsStationSerializerDetail>>> {
        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling gETMarsStationList.');
        }

        const queryParameters: any = {};

        if (requestParameters.statusMission !== undefined) {
            queryParameters['status_mission'] = requestParameters.statusMission;
        }

        if (requestParameters.dateCreate !== undefined) {
            queryParameters['date_create'] = requestParameters.dateCreate;
        }

        if (requestParameters.dateClose !== undefined) {
            queryParameters['date_close'] = requestParameters.dateClose;
        }

        if (requestParameters.statusTask !== undefined) {
            queryParameters['status_task'] = requestParameters.statusTask;
        }

        if (requestParameters.dateFormAfter !== undefined) {
            queryParameters['date_form_after'] = requestParameters.dateFormAfter;
        }

        if (requestParameters.dateFormBefore !== undefined) {
            queryParameters['date_form_before'] = requestParameters.dateFormBefore;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        const response = await this.request({
            path: `/api/mars_station/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(MarsStationSerializerDetailFromJSON));
    }

    /**
     * Получение списка марсианских станций
     */
    async gETMarsStationList(requestParameters: GETMarsStationListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<MarsStationSerializerDetail>> {
        const response = await this.gETMarsStationListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Обновление информации о марсианской станции по ID
     */
    async pUTMarsStationRaw(requestParameters: PUTMarsStationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<MarsStationSerializer>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling pUTMarsStation.');
        }

        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling pUTMarsStation.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        const response = await this.request({
            path: `/api/mars_station/{id}/update/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: MarsStationSerializerToJSON(requestParameters.marsStationSerializer),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => MarsStationSerializerFromJSON(jsonValue));
    }

    /**
     * Обновление информации о марсианской станции по ID
     */
    async pUTMarsStation(requestParameters: PUTMarsStationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<MarsStationSerializer> {
        const response = await this.pUTMarsStationRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Обновление информации о марсианской станции по ID модератора
     */
    async pUTMarsStationBYADMINRaw(requestParameters: PUTMarsStationBYADMINOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling pUTMarsStationBYADMIN.');
        }

        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling pUTMarsStationBYADMIN.');
        }

        if (requestParameters.pUTMarsStationBYADMINRequest === null || requestParameters.pUTMarsStationBYADMINRequest === undefined) {
            throw new runtime.RequiredError('pUTMarsStationBYADMINRequest','Required parameter requestParameters.pUTMarsStationBYADMINRequest was null or undefined when calling pUTMarsStationBYADMIN.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        const response = await this.request({
            path: `/api/mars_station/{id}/update_by_admin/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: PUTMarsStationBYADMINRequestToJSON(requestParameters.pUTMarsStationBYADMINRequest),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Обновление информации о марсианской станции по ID модератора
     */
    async pUTMarsStationBYADMIN(requestParameters: PUTMarsStationBYADMINOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.pUTMarsStationBYADMINRaw(requestParameters, initOverrides);
    }

    /**
     * Обновление информации о марсианской станции по ID создателя
     */
    async pUTMarsStationBYUSERRaw(requestParameters: PUTMarsStationBYUSERRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling pUTMarsStationBYUSER.');
        }

        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling pUTMarsStationBYUSER.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        const response = await this.request({
            path: `/api/mars_station/{id}/update_by_user/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Обновление информации о марсианской станции по ID создателя
     */
    async pUTMarsStationBYUSER(requestParameters: PUTMarsStationBYUSERRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.pUTMarsStationBYUSERRaw(requestParameters, initOverrides);
    }

}
