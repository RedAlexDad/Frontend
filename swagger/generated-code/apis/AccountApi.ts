/* tslint:disable */
/* eslint-disable */
/**
 * Географические объекты
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  GetTokenSerializer,
  UserAuthenticationSerializer,
  UserRegisterSerializer,
} from '../models/index';
import {
    GetTokenSerializerFromJSON,
    GetTokenSerializerToJSON,
    UserAuthenticationSerializerFromJSON,
    UserAuthenticationSerializerToJSON,
    UserRegisterSerializerFromJSON,
    UserRegisterSerializerToJSON,
} from '../models/index';

export interface ApiAuthenticationPostRequest {
    userAuthenticationSerializer: UserAuthenticationSerializer;
}

export interface ApiGetTokenPostRequest {
    authorization: string;
}

export interface ApiRegisterPostRequest {
    userRegisterSerializer: UserRegisterSerializer;
}

/**
 * 
 */
export class AccountApi extends runtime.BaseAPI {

    /**
     * Аутентификация пользователя
     */
    async apiAuthenticationPostRaw(requestParameters: ApiAuthenticationPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetTokenSerializer>> {
        if (requestParameters.userAuthenticationSerializer === null || requestParameters.userAuthenticationSerializer === undefined) {
            throw new runtime.RequiredError('userAuthenticationSerializer','Required parameter requestParameters.userAuthenticationSerializer was null or undefined when calling apiAuthenticationPost.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/authentication/`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: UserAuthenticationSerializerToJSON(requestParameters.userAuthenticationSerializer),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetTokenSerializerFromJSON(jsonValue));
    }

    /**
     * Аутентификация пользователя
     */
    async apiAuthenticationPost(requestParameters: ApiAuthenticationPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetTokenSerializer> {
        const response = await this.apiAuthenticationPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Получение токена
     */
    async apiGetTokenPostRaw(requestParameters: ApiGetTokenPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetTokenSerializer>> {
        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling apiGetTokenPost.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        const response = await this.request({
            path: `/api/get_token/`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetTokenSerializerFromJSON(jsonValue));
    }

    /**
     * Получение токена
     */
    async apiGetTokenPost(requestParameters: ApiGetTokenPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetTokenSerializer> {
        const response = await this.apiGetTokenPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Выход с учетной записи
     */
    async apiLogoutPostRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/logout/`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Выход с учетной записи
     */
    async apiLogoutPost(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.apiLogoutPostRaw(initOverrides);
    }

    /**
     * Регистрация нового пользователя
     */
    async apiRegisterPostRaw(requestParameters: ApiRegisterPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UserRegisterSerializer>> {
        if (requestParameters.userRegisterSerializer === null || requestParameters.userRegisterSerializer === undefined) {
            throw new runtime.RequiredError('userRegisterSerializer','Required parameter requestParameters.userRegisterSerializer was null or undefined when calling apiRegisterPost.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/register/`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: UserRegisterSerializerToJSON(requestParameters.userRegisterSerializer),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UserRegisterSerializerFromJSON(jsonValue));
    }

    /**
     * Регистрация нового пользователя
     */
    async apiRegisterPost(requestParameters: ApiRegisterPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UserRegisterSerializer> {
        const response = await this.apiRegisterPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
