/* tslint:disable */
/* eslint-disable */
/**
 * Географические объекты
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ApiGeographicalObjectIdCreateServiceInTaskPost201Response,
  GeographicalObjectListSerializer,
  GeographicalObjectSerializer,
} from '../models/index';
import {
    ApiGeographicalObjectIdCreateServiceInTaskPost201ResponseFromJSON,
    ApiGeographicalObjectIdCreateServiceInTaskPost201ResponseToJSON,
    GeographicalObjectListSerializerFromJSON,
    GeographicalObjectListSerializerToJSON,
    GeographicalObjectSerializerFromJSON,
    GeographicalObjectSerializerToJSON,
} from '../models/index';

export interface ApiGeographicalObjectCreatePostRequest {
    authorization: string;
    geographicalObjectSerializer: GeographicalObjectSerializer;
}

export interface ApiGeographicalObjectGetRequest {
    authorization: string;
    feature?: string;
    type?: string;
    size?: string;
    describe?: string;
    status?: string;
    page?: string;
}

export interface ApiGeographicalObjectIdCreateServiceInTaskPostRequest {
    id: number;
    authorization: string;
}

export interface ApiGeographicalObjectIdDeleteDeleteRequest {
    id: number;
    authorization: string;
}

export interface ApiGeographicalObjectIdGetRequest {
    id: number;
}

export interface ApiGeographicalObjectIdImageGetRequest {
    id: number;
}

export interface ApiGeographicalObjectIdUpdateImagePutRequest {
    id: number;
    authorization: string;
    photo: Blob;
}

export interface ApiGeographicalObjectIdUpdatePutRequest {
    id: number;
    authorization: string;
    geographicalObjectSerializer: GeographicalObjectSerializer;
}

/**
 * 
 */
export class GeographicalObjectApi extends runtime.BaseAPI {

    /**
     * Создать географический объект
     */
    async apiGeographicalObjectCreatePostRaw(requestParameters: ApiGeographicalObjectCreatePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GeographicalObjectSerializer>> {
        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling apiGeographicalObjectCreatePost.');
        }

        if (requestParameters.geographicalObjectSerializer === null || requestParameters.geographicalObjectSerializer === undefined) {
            throw new runtime.RequiredError('geographicalObjectSerializer','Required parameter requestParameters.geographicalObjectSerializer was null or undefined when calling apiGeographicalObjectCreatePost.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        const response = await this.request({
            path: `/api/geographical_object/create/`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: GeographicalObjectSerializerToJSON(requestParameters.geographicalObjectSerializer),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GeographicalObjectSerializerFromJSON(jsonValue));
    }

    /**
     * Создать географический объект
     */
    async apiGeographicalObjectCreatePost(requestParameters: ApiGeographicalObjectCreatePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GeographicalObjectSerializer> {
        const response = await this.apiGeographicalObjectCreatePostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Получить список географических объектов
     */
    async apiGeographicalObjectGetRaw(requestParameters: ApiGeographicalObjectGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GeographicalObjectListSerializer>> {
        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling apiGeographicalObjectGet.');
        }

        const queryParameters: any = {};

        if (requestParameters.feature !== undefined) {
            queryParameters['feature'] = requestParameters.feature;
        }

        if (requestParameters.type !== undefined) {
            queryParameters['type'] = requestParameters.type;
        }

        if (requestParameters.size !== undefined) {
            queryParameters['size'] = requestParameters.size;
        }

        if (requestParameters.describe !== undefined) {
            queryParameters['describe'] = requestParameters.describe;
        }

        if (requestParameters.status !== undefined) {
            queryParameters['status'] = requestParameters.status;
        }

        if (requestParameters.page !== undefined) {
            queryParameters['page'] = requestParameters.page;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        const response = await this.request({
            path: `/api/geographical_object/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GeographicalObjectListSerializerFromJSON(jsonValue));
    }

    /**
     * Получить список географических объектов
     */
    async apiGeographicalObjectGet(requestParameters: ApiGeographicalObjectGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GeographicalObjectListSerializer> {
        const response = await this.apiGeographicalObjectGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Создание заявки и связывание географического объекта с Марсианской станцией
     */
    async apiGeographicalObjectIdCreateServiceInTaskPostRaw(requestParameters: ApiGeographicalObjectIdCreateServiceInTaskPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ApiGeographicalObjectIdCreateServiceInTaskPost201Response>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling apiGeographicalObjectIdCreateServiceInTaskPost.');
        }

        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling apiGeographicalObjectIdCreateServiceInTaskPost.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        const response = await this.request({
            path: `/api/geographical_object/{id}/create_service_in_task/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ApiGeographicalObjectIdCreateServiceInTaskPost201ResponseFromJSON(jsonValue));
    }

    /**
     * Создание заявки и связывание географического объекта с Марсианской станцией
     */
    async apiGeographicalObjectIdCreateServiceInTaskPost(requestParameters: ApiGeographicalObjectIdCreateServiceInTaskPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ApiGeographicalObjectIdCreateServiceInTaskPost201Response> {
        const response = await this.apiGeographicalObjectIdCreateServiceInTaskPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Удалить географический объект
     */
    async apiGeographicalObjectIdDeleteDeleteRaw(requestParameters: ApiGeographicalObjectIdDeleteDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling apiGeographicalObjectIdDeleteDelete.');
        }

        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling apiGeographicalObjectIdDeleteDelete.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        const response = await this.request({
            path: `/api/geographical_object/{id}/delete/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Удалить географический объект
     */
    async apiGeographicalObjectIdDeleteDelete(requestParameters: ApiGeographicalObjectIdDeleteDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.apiGeographicalObjectIdDeleteDeleteRaw(requestParameters, initOverrides);
    }

    /**
     * Получить информацию о географическом объекте
     */
    async apiGeographicalObjectIdGetRaw(requestParameters: ApiGeographicalObjectIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GeographicalObjectSerializer>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling apiGeographicalObjectIdGet.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/geographical_object/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GeographicalObjectSerializerFromJSON(jsonValue));
    }

    /**
     * Получить информацию о географическом объекте
     */
    async apiGeographicalObjectIdGet(requestParameters: ApiGeographicalObjectIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GeographicalObjectSerializer> {
        const response = await this.apiGeographicalObjectIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Получить изображение географического объекта
     */
    async apiGeographicalObjectIdImageGetRaw(requestParameters: ApiGeographicalObjectIdImageGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Blob>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling apiGeographicalObjectIdImageGet.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/geographical_object/{id}/image/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.BlobApiResponse(response);
    }

    /**
     * Получить изображение географического объекта
     */
    async apiGeographicalObjectIdImageGet(requestParameters: ApiGeographicalObjectIdImageGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Blob> {
        const response = await this.apiGeographicalObjectIdImageGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Обновить изображение географического объекта
     */
    async apiGeographicalObjectIdUpdateImagePutRaw(requestParameters: ApiGeographicalObjectIdUpdateImagePutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling apiGeographicalObjectIdUpdateImagePut.');
        }

        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling apiGeographicalObjectIdUpdateImagePut.');
        }

        if (requestParameters.photo === null || requestParameters.photo === undefined) {
            throw new runtime.RequiredError('photo','Required parameter requestParameters.photo was null or undefined when calling apiGeographicalObjectIdUpdateImagePut.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        const consumes: runtime.Consume[] = [
            { contentType: 'multipart/form-data' },
        ];
        // @ts-ignore: canConsumeForm may be unused
        const canConsumeForm = runtime.canConsumeForm(consumes);

        let formParams: { append(param: string, value: any): any };
        let useForm = false;
        // use FormData to transmit files using content-type "multipart/form-data"
        useForm = canConsumeForm;
        if (useForm) {
            formParams = new FormData();
        } else {
            formParams = new URLSearchParams();
        }

        if (requestParameters.photo !== undefined) {
            formParams.append('photo', requestParameters.photo as any);
        }

        const response = await this.request({
            path: `/api/geographical_object/{id}/update_image/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: formParams,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Обновить изображение географического объекта
     */
    async apiGeographicalObjectIdUpdateImagePut(requestParameters: ApiGeographicalObjectIdUpdateImagePutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.apiGeographicalObjectIdUpdateImagePutRaw(requestParameters, initOverrides);
    }

    /**
     * Обновить информацию о географическом объекте
     */
    async apiGeographicalObjectIdUpdatePutRaw(requestParameters: ApiGeographicalObjectIdUpdatePutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GeographicalObjectSerializer>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling apiGeographicalObjectIdUpdatePut.');
        }

        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling apiGeographicalObjectIdUpdatePut.');
        }

        if (requestParameters.geographicalObjectSerializer === null || requestParameters.geographicalObjectSerializer === undefined) {
            throw new runtime.RequiredError('geographicalObjectSerializer','Required parameter requestParameters.geographicalObjectSerializer was null or undefined when calling apiGeographicalObjectIdUpdatePut.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        const response = await this.request({
            path: `/api/geographical_object/{id}/update/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: GeographicalObjectSerializerToJSON(requestParameters.geographicalObjectSerializer),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GeographicalObjectSerializerFromJSON(jsonValue));
    }

    /**
     * Обновить информацию о географическом объекте
     */
    async apiGeographicalObjectIdUpdatePut(requestParameters: ApiGeographicalObjectIdUpdatePutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GeographicalObjectSerializer> {
        const response = await this.apiGeographicalObjectIdUpdatePutRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
